{
	"cluster properties": "集群属性", 
    "App Name": "应用名称",
	"The name of the application": "应用名称",
	"PG Simple Cluster": "PG集群", 
	
	"Description": "应用描述",
	"The description of the application": "应用描述", 
	
	"VxNet": "私有网络",
	"The vxnet that the application will join": "应用运行的私有网络环境",
	
	"Role Name": "角色", 
	"role-based node properties": "基于角色的节点属性", 
	
	"CPU": "CPU",
	"CPUs of each node": "每个节点的CPU", 
	
	 "Memory": "内存",
	 "Memory of each node (in MiB)": "每个节点的内存大小（单位 MiB）",	 
	 
	 "Instance Class":"实例类别",
	 "The instance type for the cluster to run，such as high performance，high performance plus":"高性能，超高性能",
	
	"Count":"节点数量",
	"Number of nodes for the cluster to create":"集群所建立的节点数量",
	
	"volume_size":"磁盘大小",
	"The volume size for each instance":"每个实例的磁盘大小",	
	
	"isMasterGrp":"是否为Master",
	"connCntGrp":"连接数",
	"commitCntGrp":"事务总数",
	"waiteventCntGrp":"等待事件数",
	"deadlocksCntGrp":"死锁数",
	
	"DBname":"数据库名称",
	"DB name to create":"新创建的数据库名称",
	"DBusername":"数据库用户名",
	"DB username to create":"新创建的数据库用户名",
	"DBpassword":"数据库密码",
	"DB password to create":"新创建的数据库密码",
	"max_connections":"最大连接数",
	"Sets the maximum number of concurrent connections.":"数据库的最大并发连接数",
	"wal_buffers":"wal_buffers",
	"Sets the number of disk-page buffers in shared memory for WAL.":"用于还未写入磁盘的 WAL 数据的共享内存量。",
	"wal_keep_segments":"wal_keep_segments",
	"Sets the number of WAL files held for standby servers.":"指定在后备服务器需要为流复制获取日志段文件的情况下，pg_xlog目录下所能保留的过去日志文件段的最小数目。",
	"checkpoint_timeout":"checkpoint_timeout",
	"Sets the maximum time between automatic WAL checkpoints.":"自动 WAL 检查点之间的最长时间，以秒计。",
	"shared_buffers":"shared_buffers",
	"Sets the number of shared memory buffers used by the server.":"设置数据库服务器将使用的共享内存缓冲区量。",
	"work_mem":"work_mem",
	"Sets the maximum memory to be used for query workspaces.":"指定在写到临时磁盘文件之前被内部排序操作和哈希表使用的内存量。",
	"effective_cache_size":"effective_cache_size",
	"Sets the planner's assumption about the size of the disk cache.":"设置规划器对一个单一查询可用的有效磁盘缓冲区尺寸的假设。",
	"maintenance_work_mem":"maintenance_work_mem",
	"Sets the maximum number of concurrent connections.":"指定在维护性操作（例如VACUUM、CREATE INDEX和ALTER TABLE ADD FOREIGN KEY）中使用的 最大的内存量。",
	"autovacuum":"autovacuum",
	"Starts the autovacuum subprocess.":"控制服务器是否运行自动清理启动器后台进程。",
	"vacuum_cost_delay":"vacuum_cost_delay",
	"Vacuum cost delay in milliseconds.":"进程超过代价限制后将休眠的时间长度，以毫秒计。",
	"autovacuum_naptime":"autovacuum_naptime",
	"Time to sleep between autovacuum runs.":"指定自动清理在任意给定数据库上运行的最小延迟。",
	"vacuum_cost_limit":"vacuum_cost_limit",
	"Vacuum cost amount available before napping.":"将导致清理进程休眠的累计代价。",
	"bgwriter_delay":"bgwriter_delay",
	"Background writer sleep time between rounds.":"指定后台写入器活动轮次之间的延迟。",
	"bgwriter_lru_multiplier":"bgwriter_lru_multiplier",
	"Multiple of the average buffer usage to free per round.":"在每个轮次中，不超过这么多个缓冲区将被后台写入器写出。",
	"wal_level":"wal_level",
	"Set the level of information written to the WAL.":"wal_level决定多少信息写入到 WAL 中。",
	"wal_writer_delay":"wal_writer_delay",
	"Time between WAL flushes performed in the WAL writer.":"指定 WAL 写入器的活动轮次之间的延迟。",
	"fsync":"fsync",
	"Forces synchronization of updates to disk.":"如果打开这个参数，PostgreSQL服务器将尝试确保更新被物理地写入到磁盘。",
	"commit_delay":"commit_delay",
	"Sets the delay in microseconds between transaction commit and flushing WAL to disk.":"在一次 WAL 刷写被发起之前，commit_delay增加一个时间延迟，以微妙计。",
	"commit_siblings":"commit_siblings",
	"Sets the minimum concurrent open transactions before performing commit_delay.":"在执行commit_delay延迟时，要求的并发活动事务的最小数目。",
	"enable_bitmapscan":"enable_bitmapscan",
	"Enables the planner's use of bitmap-scan plans.":"允许或禁止查询规划器使用位图扫描计划类型。",
	"enable_seqscan":"enable_seqscan",
	"Enables the planner's use of sequential-scan plans.":"允许或禁止查询规划器使用顺序扫描计划类型。",
	"full_page_writes":"full_page_writes",
	"Writes full pages to WAL when first modified after a checkpoint.":"当这个参数为打开时，PostgreSQL服务器在一个检查点之后的页面的第一次修改期间将每个页面的全部内容写到 WAL 中。",
	"log_min_messages":"log_min_messages",
	"Sets the message levels that are logged.":"控制哪些消息级别被写入到服务器日志。",
	"deadlock_timeout":"deadlock_timeout",
	"Sets the time to wait on a lock before checking for deadlock.":"这是进行死锁检测之前在一个锁上等待的总时间（以毫秒计）。",
	"log_lock_waits":"log_lock_waits",
	"Logs long lock waits.":"控制当一个会话为获得一个锁等到超过deadlock_timeout时，是否要产生一个日志消息。",
	"log_min_duration_statement":"log_min_duration_statement",
	"Sets the minimum execution time above which statements will be logged.":"如果语句运行至少指定的毫秒数，将导致记录每一个这种完成的语句的持续时间。",
	"temp_buffers":"temp_buffers",
	"Sets the maximum number of temporary buffers used by each session.":"设置每个数据库会话使用的临时缓冲区的最大数目。",
	"max_prepared_transactions":"max_prepared_transactions",
	"Sets the maximum number of simultaneously prepared transactions.":"设置可以同时处于prepared状态的事务的最大数目。" ,
	"max_wal_senders":"max_wal_senders" ,
	"Sets the maximum number of simultaneously running WAL sender processes.":"指定来自后备服务器或流式基础备份客户端的并发连接的最大数量（即同时运行 WAL 发送进程 的最大数）。" ,
	"bgwriter_lru_maxpages":"bgwriter_lru_maxpages" ,
	"Background writer maximum number of LRU pages to flush per round.":"在每个轮次中，不超过这么多个缓冲区将被后台写入器写出。" ,
	"synchronous_standby_names":"synchronous_standby_names" ,
	"Number of synchronous standbys and list of names of potential synchronous ones.":"这个参数指定一个支持同步复制的后备服务器的列表。standby_name是standby配置在recovery.conf中的application_name，可以使用*代替所有standby。" ,
	"synchronous_commit":"synchronous_commit" ,
	"Sets the current transaction's synchronization level.":"指定在命令返回'success'指示给客户端之前，一个事务是否需要等待 WAL 记录被写入磁盘。合法的值是on、remote_apply、 remote_write、local和off。当synchronous_commit=remote_apply时，这个事务产生的REDO必须要在sync standby(s)已apply，才返回给客户端事务结束。这类事务，事务结束后发起的读请求，在primary以及sync standby可以做到读写完全一致。牺牲写事务的RT，获得在多节点的读事务的完全一致。" 

}